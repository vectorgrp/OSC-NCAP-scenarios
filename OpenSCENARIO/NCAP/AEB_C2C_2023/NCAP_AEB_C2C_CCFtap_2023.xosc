<?xml version='1.0' encoding='utf-8'?>
<OpenSCENARIO xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="OpenSCENARIO.xsd">
  <!--Copyright (c) 2024-2025, Vector Informatik GmbH-->
  <FileHeader revMajor="1" revMinor="3" date="2025-08-27T09:09:29" author="Vector Informatik GmbH" description="Base Scenario for NCAP AEB C2C CCFtap and (through variation) CMFtap">
    <License name="Mozilla Public License Version 2.0" resource="https://www.mozilla.org/en-US/MPL/2.0/" spdxId="MPL-2.0" />
  </FileHeader>
  <ParameterDeclarations>
    <ParameterDeclaration name="Ego_speed_kph" parameterType="double" value="10" />
    <ParameterDeclaration name="Ego_initS" parameterType="double" value="90"><!--initial advance of Ego entity-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Ego_length" parameterType="double" value="4.358" />
    <ParameterDeclaration name="Ego_BBcenter_x" parameterType="double" value="1.349" />
    <ParameterDeclaration name="Ego_turningDirection" parameterType="int" value="1"><!--direction of the Ego trajectory to switch between farside turn (1) and nearside turn (-1)-->
      <!--relevant for parameterization of trajectory however always equal to 1 for CCFtap and CMFtap-->
      <ConstraintGroup>
        <ValueConstraint value="1" rule="equalTo" />
      </ConstraintGroup>
    </ParameterDeclaration>
    <ParameterDeclaration name="Target_catalogName" parameterType="string" value="Vehicles">
    </ParameterDeclaration>
    <ParameterDeclaration name="Target_catalogEntry" parameterType="string" value="NCAP_GlobalVehicleTarget">
    </ParameterDeclaration>
    <ParameterDeclaration name="Target_width" parameterType="double" value="1.712" />
    <ParameterDeclaration name="Target_length" parameterType="double" value="4.023" />
    <ParameterDeclaration name="Target_BBcenter_x" parameterType="double" value="1.328" />
    <ParameterDeclaration name="Target_finalSpeed_kph" parameterType="double" value="30" />
    <ParameterDeclaration name="Target_initS" parameterType="double" value="50"><!--initial advance of Target entity-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Target_steadyStateDist" parameterType="double" value="50"><!--distance for which target will maintain constant speed prior to reaching synchronization point--><!--not provided explicitly by NCAP protocols-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Road_armLength" parameterType="double" value="150" />
    <ParameterDeclaration name="Road_laneWidth" parameterType="double" value="3.5" />
    <ParameterDeclaration name="Road_radius" parameterType="double" value="8"><!--road radius as defined by NCAP-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Trajectory_R1" parameterType="double" value="1500"><!--(large) radius at start of clothoid of trajectory defined as R1 in NCAP protocol-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Trajectory_R2" parameterType="double" value="9"><!--(small) radius at clothoid end and arc of trajectory defined as R2 in NCAP protocol-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Trajectory_alpha" parameterType="double" value="20.62"><!--angle covered by clothoid defined as alpha (deg) in NCAP protocol-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Trajectory_beta" parameterType="double" value="48.76"><!--angle covered by arc defined as beta (deg) in NCAP protocol-->
    </ParameterDeclaration>
    <ParameterDeclaration name="Scenario_ID" parameterType="string" value="CCFtap"><!--this parameter is not used within the scenario but may support the assessment-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Ego_speed" parameterType="double" value="${$Ego_speed_kph/3.6}"><!--allows kph as unit in variation definition as in NCAP protocol -->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Ego_frontBumperLon" parameterType="double" value="${$Ego_BBcenter_x+($Ego_length/2)}"><!--distance from rear axle to front end (bumper) of the bounding box -->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Target_frontBumperLon" parameterType="double" value="${$Target_BBcenter_x+($Target_length/2)}"><!--distance from rear axle to front end (bumper) of the bounding box -->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Target_finalSpeed" parameterType="double" value="${$Target_finalSpeed_kph/3.6}"><!--allows kph as unit in variation definition as in NCAP protocol -->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_kappa1" parameterType="double" value="${1/$Trajectory_R1}"><!--curvature at R1-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_kappa2" parameterType="double" value="${1/$Trajectory_R2}"><!--curvature at R2-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_alpha_rad" parameterType="double" value="${$Trajectory_alpha*pi/180}" />
    <ParameterDeclaration name="_Trajectory_beta_rad" parameterType="double" value="${$Trajectory_beta*pi/180}" />
    <ParameterDeclaration name="_Trajectory_clothoidLength" parameterType="double" value="${(2*$_Trajectory_alpha_rad)/($_Trajectory_kappa2+$_Trajectory_kappa1)}"><!--length of the clothoid with different start and end curvature-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_arcLength" parameterType="double" value="${$_Trajectory_beta_rad*$Trajectory_R2}"><!--length of the arc-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_clothoidDeltaLong" parameterType="double" value="${$_Trajectory_clothoidLength}"><!--approximation for the projection of the clothoid (long axis) (X ~ L)-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_clothoidDeltaShort" parameterType="double" value="${($_Trajectory_clothoidLength*$_Trajectory_clothoidLength)/(6*$Trajectory_R2)}"><!--approximation for the projection of the clothoid (short axis) (Y ~ L^2 / (6*R))--><!--assuming clothoid is starting from straight-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_arcDelta" parameterType="double" value="${2*$Trajectory_R2*cos(pi/4)*sin($_Trajectory_beta_rad/2)}"><!--projection of the arc to X and Y-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_totalDelta" parameterType="double" value="${$_Trajectory_arcDelta+$_Trajectory_clothoidDeltaShort+$_Trajectory_clothoidDeltaLong}"><!--total covered distance of the curved trajectory part projected to one axis-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_straightLength" parameterType="double" value="${$Road_armLength-$Ego_initS-$_Trajectory_totalDelta+$Road_radius+$Road_laneWidth*(1+$Ego_turningDirection/2)}"><!--length of the straight part of the trajectory --><!--needs to be fitted to ensure trajectory is exiting intersection at distance declared in NCAP protocol--><!--last term takes into account that intersection needs to be crossed (farside turn) or not (nearside turn)-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_arcAngleCollisionPoint" parameterType="double" value="${acos(cos($_Trajectory_alpha_rad)-($Road_laneWidth-$_Trajectory_clothoidDeltaShort)/$Trajectory_R2)-$_Trajectory_alpha_rad}"><!--angle of the trajectory's arc section that is traversed until collision point-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_arcLengthCollisionPoint" parameterType="double" value="${$Trajectory_R2*$_Trajectory_arcAngleCollisionPoint}"><!--length of the trajectory's arc section that is traversed until collision point-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Trajectory_bendCollisionPoint" parameterType="double" value="${$_Trajectory_totalDelta-$_Trajectory_clothoidDeltaLong-$Trajectory_R2*(sin($_Trajectory_arcAngleCollisionPoint+$_Trajectory_alpha_rad)-sin($_Trajectory_alpha_rad))}"><!--distance between outbound straight part of ego trajectory and collision point along target trajectory-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Ego_syncS" parameterType="double" value="${$_Trajectory_straightLength+$_Trajectory_clothoidLength+$_Trajectory_arcLengthCollisionPoint-$_Ego_frontBumperLon-sqrt(2*$Target_width/2*$Target_width/2)}"><!--synchronization point of Ego vehicle along its trajectory assuming hitting the target at 45 deg-->
    </ParameterDeclaration>
    <ParameterDeclaration name="_Target_syncS" parameterType="double" value="${$Road_armLength+$Road_radius+$Road_laneWidth/2-$_Target_frontBumperLon+$_Trajectory_bendCollisionPoint}"><!--synchronization point of Target vehicle along its trajectory-->
    </ParameterDeclaration>
  </ParameterDeclarations>
  <VariableDeclarations>
    <VariableDeclaration name="collisionDetected" variableType="boolean" value="false" />
    <VariableDeclaration name="egoSpeedReached" variableType="double" value="0.0" />
  </VariableDeclarations>
  <CatalogLocations>
    <VehicleCatalog>
      <Directory path="../Catalogs/Vehicles" />
    </VehicleCatalog>
    <PedestrianCatalog>
      <Directory path="../Catalogs/Pedestrians" />
    </PedestrianCatalog>
    <TrajectoryCatalog>
      <Directory path="../Catalogs/Trajectories" />
    </TrajectoryCatalog>
    <RouteCatalog>
      <Directory path="../Catalogs/Routes" />
    </RouteCatalog>
    <ManeuverCatalog>
      <Directory path="../Catalogs/Maneuver" />
    </ManeuverCatalog>
    <EnvironmentCatalog>
      <Directory path="../Catalogs/Environments" />
    </EnvironmentCatalog>
  </CatalogLocations>
  <RoadNetwork>
    <LogicFile filepath="../../../OpenDRIVE/NCAP/X-Intersection_NCAP.xodr" />
  </RoadNetwork>
  <Entities>
    <ScenarioObject name="Ego">
      <CatalogReference entryName="VW_Golf_Sportsvan_2015" catalogName="Vehicles" />
      <ObjectController>
        <Controller name="FrontAxleControlPoint">
          <Properties>
            <Property name="Driver.ControlPoint.Mode" value="FrontAxle" /><!--OpenSCENARIO specifies control point in center of rear axle but center of front axle is specified by NCAP protocol-->
          </Properties>
        </Controller>
      </ObjectController>
    </ScenarioObject>
    <ScenarioObject name="Target">
      <CatalogReference entryName="$Target_catalogEntry" catalogName="$Target_catalogName" />
    </ScenarioObject>
  </Entities>
  <Storyboard>
    <Init>
      <Actions>
        <GlobalAction>
          <EnvironmentAction>
            <CatalogReference catalogName="Environments" entryName="Sunny" />
          </EnvironmentAction>
        </GlobalAction>
        <Private entityRef="Ego">
          <PrivateAction>
            <RoutingAction>
              <FollowTrajectoryAction>
                <TimeReference>
                  <None />
                </TimeReference>
                <TrajectoryFollowingMode followingMode="follow" />
                <TrajectoryRef>
                  <CatalogReference catalogName="TrajectoryCatalog" entryName="Ego_CxTx">
                    <ParameterAssignments>
                      <ParameterAssignment value="${$Ego_turningDirection*$_Trajectory_kappa1}" parameterRef="kappa1" />
                      <ParameterAssignment value="${$Ego_turningDirection*$_Trajectory_kappa2}" parameterRef="kappa2" />
                      <ParameterAssignment value="$_Trajectory_clothoidLength" parameterRef="clothoidLength" />
                      <ParameterAssignment value="$_Trajectory_arcLength" parameterRef="arcLength" />
                      <ParameterAssignment value="$Ego_initS" parameterRef="start_s" />
                      <ParameterAssignment value="$_Trajectory_straightLength" parameterRef="straight_length" />
                    </ParameterAssignments>
                  </CatalogReference>
                </TrajectoryRef>
              </FollowTrajectoryAction>
            </RoutingAction>
          </PrivateAction>
          <PrivateAction>
            <LongitudinalAction>
              <SpeedAction>
                <SpeedActionDynamics dynamicsDimension="time" dynamicsShape="step" value="0" />
                <SpeedActionTarget>
                  <AbsoluteTargetSpeed value="$_Ego_speed" />
                </SpeedActionTarget>
              </SpeedAction>
            </LongitudinalAction>
          </PrivateAction>
        </Private>
        <Private entityRef="Target">
          <PrivateAction>
            <RoutingAction>
              <FollowTrajectoryAction initialDistanceOffset="$Target_initS">
                <TimeReference>
                  <None />
                </TimeReference>
                <TrajectoryFollowingMode followingMode="follow" />
                <TrajectoryRef>
                  <CatalogReference catalogName="TrajectoryCatalog" entryName="Target_straightAcross">
                  </CatalogReference>
                </TrajectoryRef>
              </FollowTrajectoryAction>
            </RoutingAction>
          </PrivateAction>
        </Private>
      </Actions>
    </Init>
    <Story name="NCAP_AEB_C2C_CCFtap_2023">
      <Act name="Collision_Act">
        <ManeuverGroup name="Synchronization_CollisionDetection" maximumExecutionCount="1">
          <Actors selectTriggeringEntities="false">
            <EntityRef entityRef="Target" />
          </Actors>
          <CatalogReference catalogName="ManeuverCatalog" entryName="LogAndSetVariables">
            <ParameterAssignments>
              <ParameterAssignment parameterRef="egoSpeed" value="$_Ego_speed" />
              <ParameterAssignment parameterRef="collidingEntity" value="Target" />
            </ParameterAssignments>
          </CatalogReference>
          <Maneuver name="Target_Synchronization">
            <Event name="Target_SynchronizeEvent" priority="override">
              <Action name="Target_SynchronizeAction">
                <PrivateAction>
                  <SynchronizeAction masterEntityRef="Ego">
                    <TargetPositionMaster>
                      <TrajectoryPosition s="$_Ego_syncS">
                        <TrajectoryRef>
                          <CatalogReference catalogName="TrajectoryCatalog" entryName="Ego_CxTx">
                            <ParameterAssignments>
                              <ParameterAssignment value="${$Ego_turningDirection*$_Trajectory_kappa1}" parameterRef="kappa1" />
                              <ParameterAssignment value="${$Ego_turningDirection*$_Trajectory_kappa2}" parameterRef="kappa2" />
                              <ParameterAssignment value="$_Trajectory_clothoidLength" parameterRef="clothoidLength" />
                              <ParameterAssignment value="$_Trajectory_arcLength" parameterRef="arcLength" />
                              <ParameterAssignment value="$Ego_initS" parameterRef="start_s" />
                              <ParameterAssignment value="$_Trajectory_straightLength" parameterRef="straight_length" />
                            </ParameterAssignments>
                          </CatalogReference>
                        </TrajectoryRef>
                      </TrajectoryPosition>
                    </TargetPositionMaster>
                    <TargetPosition>
                      <TrajectoryPosition s="$_Target_syncS">
                        <TrajectoryRef>
                          <CatalogReference catalogName="TrajectoryCatalog" entryName="Target_straightAcross">
                          </CatalogReference>
                        </TrajectoryRef>
                      </TrajectoryPosition>
                    </TargetPosition>
                    <FinalSpeed>
                      <AbsoluteSpeed value="$_Target_finalSpeed">
                        <TargetDistanceSteadyState distance="$Target_steadyStateDist" />
                      </AbsoluteSpeed>
                    </FinalSpeed>
                  </SynchronizeAction>
                </PrivateAction>
              </Action>
            </Event>
          </Maneuver>
        </ManeuverGroup>
        <StartTrigger>
          <ConditionGroup>
            <Condition name="SimulationStart" delay="0" conditionEdge="rising">
              <ByValueCondition>
                <SimulationTimeCondition value="0.5" rule="greaterThan" />
              </ByValueCondition>
            </Condition>
          </ConditionGroup>
        </StartTrigger>
      </Act>
    </Story>
    <StopTrigger>
      <ConditionGroup>
        <Condition name="StopAfterCollision" delay="3" conditionEdge="none">
          <ByValueCondition>
            <VariableCondition variableRef="collisionDetected" rule="equalTo" value="true" />
          </ByValueCondition>
        </Condition>
      </ConditionGroup>
      <ConditionGroup>
        <Condition name="StopAtStandstill" delay="3" conditionEdge="rising">
          <ByEntityCondition>
            <TriggeringEntities triggeringEntitiesRule="any">
              <EntityRef entityRef="Ego" />
            </TriggeringEntities>
            <EntityCondition>
              <SpeedCondition value="0.1" rule="lessThan" />
            </EntityCondition>
          </ByEntityCondition>
        </Condition>
        <Condition name="EnsureTraveledDistance" delay="0" conditionEdge="none">
          <ByEntityCondition>
            <TriggeringEntities triggeringEntitiesRule="any">
              <EntityRef entityRef="Ego" />
            </TriggeringEntities>
            <EntityCondition>
              <TraveledDistanceCondition value="$_Trajectory_straightLength" /><!--travel at least to intersection-->
            </EntityCondition>
          </ByEntityCondition>
        </Condition>
      </ConditionGroup>
      <ConditionGroup>
        <Condition name="StopPastTarget" delay="0" conditionEdge="none">
          <ByEntityCondition>
            <TriggeringEntities triggeringEntitiesRule="any">
              <EntityRef entityRef="Ego" />
            </TriggeringEntities>
            <EntityCondition>
              <TraveledDistanceCondition value="${$_Trajectory_straightLength+$_Trajectory_clothoidLength+$_Trajectory_arcLength+$Ego_length}" /><!--travel behind collision point-->
            </EntityCondition>
          </ByEntityCondition>
        </Condition>
      </ConditionGroup>
      <ConditionGroup>
        <Condition name="StopTargetCrossed" delay="0" conditionEdge="none">
          <ByEntityCondition>
            <TriggeringEntities triggeringEntitiesRule="any">
              <EntityRef entityRef="Target" />
            </TriggeringEntities>
            <EntityCondition>
              <TraveledDistanceCondition value="${1.5*($_Target_syncS-$Target_initS)}" /><!--consider Target travelled past the collision point-->
            </EntityCondition>
          </ByEntityCondition>
        </Condition>
      </ConditionGroup>
    </StopTrigger>
  </Storyboard>
</OpenSCENARIO>